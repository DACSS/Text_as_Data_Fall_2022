{
  "hash": "8674730777fa51aea11ae1b02d84b1d6",
  "result": {
    "markdown": "---\ntitle: \"Topic Modelling\"\nauthor: \"Adithya Parupudi\"\ndesription: \"Topic Modeling attempt\"\ndate: \"10/11/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - Adithya Parupudi\n---\n\n\n# Libraries\n\nReading in all the libraries :)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quanteda)\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(stringr)\nlibrary(tokenizers)\nlibrary(tm)\nlibrary(wordcloud)\nlibrary(wordcloud2)\nlibrary(stopwords)\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(ggplot2)\nknitr::opts_chunk$set(echo=TRUE)\n```\n:::\n\n\n# Reading Data\n\n### **From CSV**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset2 <- read_csv(\"./100FamousPeople.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 116 Columns: 4\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): people_names, links, content dbl (1): ...1\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nhead(dataset2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n   ...1 people_names     links                                           content\n  <dbl> <chr>            <chr>                                           <chr>  \n1     1 Abraham Lincoln  https://www.biographyonline.net/politicians/am… \"“With…\n2     2 Adolf Hitler     https://www.biographyonline.net/military/adolf… \"Adolf…\n3     3 Albert Einstein  https://www.biographyonline.net/scientists/alb… \"Born …\n4     4 Alfred Hitchcock https://www.biographyonline.net/actors/alfred-… \"Sir A…\n5     5 Amelia Earhart ( https://www.biographyonline.net/adventurers/am… \"Ameli…\n6     6 Angelina Jolie   https://www.biographyonline.net/actors/angelin… \"Angel…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset2<- tibble(dataset2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# counting number of words each row\n\nstr_count(dataset2$content, '\\\\s+')+1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 1903 1144 1879 1269 1445 1482 1441 1386 1082 1616 1567  734 1519  523  777\n [16]  598  975  862 1267 1043 1083  914 1402 1539 1086 1064 1325 1467 1165 1851\n [31] 1301 1491  654 1718 1252 1289 1510 1780 2546 1193 2133 1023 1432 1811 1872\n [46] 1173 1054  915 1800 1426 1638 1492  987 1030  886 1831  637 1405 1809 1915\n [61] 1218  852 1340  826 1268 1496 1746  536  851 1393 1650 1170 1201  930  774\n [76] 1052 1249  914 1698 1188 2668 1190 1634 1156 1253 1031 1223  914 1244 1035\n [91] 1464 1641 1265 1366 1161 1253 1436  993 2108 2215  427 1664 2184 1287 1370\n[106]  745 1669 1185 1489 1559 1323 1361 1626 1763  979 1373\n```\n:::\n:::\n\n# Using STM\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_dataset <- dataset2 %>% \n  mutate(line=row_number()) %>%  # adding row number\n  unnest_tokens(word, content) %>%  # tokenising content column to a 'word' column\n  anti_join(stop_words) #removing stop words \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"word\"\n```\n:::\n\n```{.r .cell-code}\ntidy_dataset %>% count(word, sort=TRUE) # countind word frequency in the tidy_dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15,377 × 2\n   word          n\n   <chr>     <int>\n 1 world       486\n 2 people      425\n 3 war         351\n 4 life        346\n 5 time        339\n 6 famous      320\n 7 including   226\n 8 women       171\n 9 biography   168\n10 oxford      159\n# … with 15,367 more rows\n```\n:::\n:::\n\n\n## Exploring tf-idf\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_dataset %>% \n  count(people_names, word, sort=TRUE) %>% \n  bind_tf_idf(word,people_names,n) %>% \n  group_by(people_names) %>% \n  top_n(10) %>% \n  ungroup() %>% \n  mutate(word=reorder(word,tf_idf)) %>% \n  filter(., people_names=='Muhammad Ali' | people_names=='Lionel Messi' | people_names=='Nelson Mandela')  %>% \n  ggplot(aes(word,tf_idf, fill=people_names)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~people_names, scales=\"free\") +\n  coord_flip() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSelecting by tf_idf\n```\n:::\n\n::: {.cell-output-display}\n![](blog5_AdithyaParupudi_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n# explore topic modeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stm' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nstm v1.3.6 successfully loaded. See ?stm for help. \n Papers, resources, and other materials at structuraltopicmodel.com\n```\n:::\n\n```{.r .cell-code}\ntidy_dfm <- tidy_dataset %>% \n  count(people_names, word, sort=TRUE) %>% \n  cast_dfm(people_names, word, n)\n\ntopic_model <- stm(tidy_dfm, K = 6, init.type = 'Spectral')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBeginning Spectral Initialization \n\t Calculating the gram matrix...\n\t Using only 10000 most frequent terms during initialization...\n\t Finding anchor words...\n \t......\n\t Recovering initialization...\n \t....................................................................................................\nInitialization complete.\n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 1 (approx. per word bound = -8.775) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 2 (approx. per word bound = -7.897, relative change = 1.001e-01) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 3 (approx. per word bound = -7.844, relative change = 6.681e-03) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 4 (approx. per word bound = -7.837, relative change = 8.981e-04) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 5 (approx. per word bound = -7.834, relative change = 3.905e-04) \nTopic 1: women, queen, john, world, time \n Topic 2: people, world, time, ford, gates \n Topic 3: war, world, people, soviet, french \n Topic 4: people, rights, civil, king, gandhi \n Topic 5: world, ali, time, record, famous \n Topic 6: life, da, film, freud, vinci \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 6 (approx. per word bound = -7.832, relative change = 2.422e-04) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 7 (approx. per word bound = -7.831, relative change = 1.175e-04) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 8 (approx. per word bound = -7.830, relative change = 6.183e-05) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 9 (approx. per word bound = -7.830, relative change = 4.783e-05) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 10 (approx. per word bound = -7.830, relative change = 3.034e-05) \nTopic 1: women, queen, john, time, world \n Topic 2: people, world, time, ford, gates \n Topic 3: war, world, people, french, life \n Topic 4: people, rights, civil, king, gandhi \n Topic 5: world, ali, time, record, famous \n Topic 6: life, da, film, freud, vinci \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 11 (approx. per word bound = -7.830, relative change = 2.048e-05) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 12 (approx. per word bound = -7.829, relative change = 1.575e-05) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 13 (approx. per word bound = -7.829, relative change = 1.133e-05) \n....................................................................................................................\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nModel Converged \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(topic_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA topic model with 6 topics, 116 documents and a 15377 word dictionary.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nTopic 1 Top Words:\n \t Highest Prob: women, queen, john, time, world, life, famous \n \t FREX: magdalene, andrews, julie, pankhurst, j.k.rowling, amelia, anthony \n \t Lift: 24th, andrews, baker, ballet, benedict, caesar’s, cleopatra’s \n \t Score: audrey, hepburn, pope, wilde, magdalene, lennon, andrews \nTopic 2 Top Words:\n \t Highest Prob: people, world, time, ford, gates, einstein, jobs \n \t FREX: web, apple, berners, baden, microsoft, hawking, computers \n \t Lift: couzens, melinda, stewart’s, 1,000,000, 1,529, 1.25, 1.5 \n \t Score: web, berners, apple, baden, microsoft, keynes, hawking \nTopic 3 Top Words:\n \t Highest Prob: war, world, people, french, life, soviet, famous \n \t FREX: bolivar, orwell, chanel, gaulle, putin, suu, kyi \n \t Lift: 130george, 1755, 1766, 1778, 1781, 1783, 1785 \n \t Score: bolivar, orwell, chanel, castro, putin, gaulle, thatcher \nTopic 4 Top Words:\n \t Highest Prob: people, rights, civil, king, gandhi, lincoln, south \n \t FREX: krugman, selassie, rosa, taliban, kennedy, mandela, haile \n \t Lift: f.w, mohandas, vice, 16,000, 180after, 1842, 1850s \n \t Score: krugman, tutu, parks, mandela, bus, selassie, luther \nTopic 5 Top Words:\n \t Highest Prob: world, ali, time, record, famous, people, player \n \t FREX: messi, zatopek, olympic, ruth, babe, football, bolt \n \t Lift: 0.94, 05, 07, 100m2015, 115, 19.19, 220 \n \t Score: messi, zatopek, ruth, olympic, babe, bolt, football \nTopic 6 Top Words:\n \t Highest Prob: life, da, film, freud, vinci, famous, plato \n \t FREX: vinci, plato, bergman, columbus, wright, mao, wilbur \n \t Lift: 10.9, 11the, 123concertospiano, 1350s, 1451, 1452, 1466 \n \t Score: plato, vinci, freud, van, gogh, leonardo, columbus \n```\n:::\n:::\n\n## Beta matrix\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_beta <- tidy(topic_model)\n\ntidy_beta %>% group_by(topic) %>% \n  top_n(10) %>% \n  ungroup() %>% \n  mutate(term=reorder(term,beta)) %>% \n  ggplot(aes(term,beta, fill=topic)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~topic, scales=\"free\") +\n  coord_flip() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSelecting by beta\n```\n:::\n\n::: {.cell-output-display}\n![](blog5_AdithyaParupudi_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n# using Gamma matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_gamma <- tidy(topic_model, matrix=\"gamma\", document_names = rownames(tidy_dfm))\n\n\nggplot(tidy_gamma, aes(gamma, fill = as.factor(topic)))+\n  geom_histogram(show.legend = FALSE)+\n  facet_wrap(~topic, ncol=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](blog5_AdithyaParupudi_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "blog5_AdithyaParupudi_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}