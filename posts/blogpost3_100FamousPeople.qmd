---
title: "Blog Post 3 - Data Cleaning and Categorising"
author: "Adithya Parupudi"
desription: "Performed data cleaning and categorising."
date: "30/10/2022"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - Adithya Parupudi
---

# Libraries

Reading in all the libraries :)

```{r}
#| label: setup
#| warning: false
library(quanteda)
library(tidyverse)
library(rvest)
library(stringr)
library(tokenizers)
library(tm)
library(wordcloud)
library(wordcloud2)
library(stopwords)
library(tidyverse)
library(tidytext)

knitr::opts_chunk$set(echo=TRUE)
```

# Reading Data

### **From CSV**

```{r}
dataset <- read_csv("./100FamousPeople_new.csv")
head(dataset)
```

# Data Extraction

## By Year

There are many people in the list who are still alive. Hence the age range(eg. 1900-2000) is not complete which is causing code issues. Hence currently filling those cases with a pre-decided value of 2022. I have created two column names - from, to; to capture the age ranges

```{r}
# from
from <-
  dataset$peoples_title %>% tolower() %>% str_extract(., "[0-9]+\\s")

# to
to <-
  dataset$peoples_title %>% tolower() %>% str_extract(., "\\s[0-9]+") %>% replace(., is.na(.), '2022')

dataset$from <- from
dataset$to <- to
colnames(dataset)
```

## By Profession

Removing unwanted terms using regex from peoples_title column, which provides a general summary of their title such as leader, founder, princess, actor etc

```{r}
dataset$peoples_title <-
  dataset$peoples_title %>%  tolower() %>%  # converting to lowercase
  str_sort() %>%
  str_extract(., "\\).*") %>% # extracting all text after ')'. Have to remove ')'
  str_replace(., "\\) ", "") %>%  #replacing ) in all lines
  str_remove_all(., "\\)[0-9]*") %>% str_trim(., "both") %>%
  str_remove_all(., "[0-9]*") %>% str_trim(., "right") %>% str_replace_all("[â€“|-|-|(|.]", "") %>% str_trim(., "both")




```

I have created pre-defined occupations to group all people accordingly. They are **politician, royalty, spiritual, businessman, entertainment, humanitarian, academia, sports,** and **others.** After categorising thoroughly there were still some people who did not fall into these categories. I've assigned those people with a **others** tag.

```{r}
# only profession

politician <-
  c("president",
    "leader",
    "minister",
    "first lady",
    "wife",
    "resistance")

royalty <- c("heir", "throne", "monarch", "emperor", "princess")

spiritual <- c("devotee", "pope")

businessman <-
  c("founder",
    "chairman",
    "businessman",
    "industrialist",
    "entrepreneur",
    "co-founder")

artist <-
  c("musician",
    "singer",
    "dancer",
    "designer",
    "painter",
    "composer",
    "poet")

entertainment <-
  c("actress", "director", "producer", "playwright", "comedian")

humanitarian <-
  c(
    "humanitarian",
    "rights",
    "activist",
    "independence",
    "movement",
    "nun",
    "campaigner",
    "charity"
  )

academia <-
  c(
    "scientist",
    "economist",
    "author",
    "economist",
    "philosopher",
    "inventor",
    "microbiologist"
  )

sports <-
  c("sport",
    "football",
    "baseball",
    "golf",
    "athlete",
    "tennis",
    "boxer",
    "basketball")

others <-
  c("explorer",
    "dancer",
    "designer",
    "socialite",
    "spy",
    "model",
    "astronaut")

dataset$profession <- with(
  dataset,
  case_when(
    str_detect(dataset$peoples_title, paste(politician, collapse = "|")) ~ "politician",
    str_detect(dataset$peoples_title, paste(royalty, collapse = "|")) ~ "royalty",
    str_detect(dataset$peoples_title, paste(spiritual, collapse = "|")) ~ "spiritual",
    str_detect(dataset$peoples_title, paste(businessman, collapse = "|")) ~ "businessman",
    str_detect(dataset$peoples_title, paste(artist, collapse = "|")) ~ "artist",
    str_detect(dataset$peoples_title, paste(entertainment, collapse = "|")) ~ "entertainment",
    str_detect(dataset$peoples_title, paste(humanitarian, collapse = "|")) ~ "humanitarian",
    str_detect(dataset$peoples_title, paste(academia, collapse = "|")) ~ "academia",
    str_detect(dataset$peoples_title, paste(sports, collapse = "|")) ~ "sports",
    str_detect(dataset$peoples_title, paste(others, collapse = "|")) ~ "others"
  )
)
# head(dataset)

dataset$profession <- dataset$profession %>% replace_na(., "others")

dataset

```

## By country

Since this is a list of 100 people, there are people from all around the world. Hence I wanted to categorize them broadly in terms of their nationality. Hence I group them into the following variables - europe_countries, other_countries, south_america, Russia, America, British, India etc.

Some countries appeared only once, while some others ( like India) appeared more then twice. So I thought it would be better to explicitly mentioned countries which appeared more frequently.

```{r}

europe_countries <-
  c(
    "italy",
    "italian",
    "swiss",
    "polish",
    "swedish",
    "irish",
    "macedonia",
    "dutch",
    "spanish",
    "portugese",
    "czech",
    "greek",
    "austria"
  )
other_countries <-
  c("tibetan",
    "russian",
    "ethiopia",
    "egypt",
    "jamaica",
    "burmese",
    "africa")
south_america <- c("argentin", "cuba", "brazilian")
pakistan <- c("pakistan")
dataset$country <- with(
  dataset,
  case_when(
    str_detect(dataset$peoples_title, "america|american|usa") ~ "america",
    str_detect(dataset$peoples_title, "british|britain|english") ~ "british",
    str_detect(dataset$peoples_title, paste(europe_countries, collapse = "|")) ~ "europe",
    str_detect(dataset$peoples_title, "russia|soviet|russian") ~ "russia",
    str_detect(dataset$peoples_title, "india") ~ "india",
    str_detect(dataset$peoples_title, "^us") ~ "america",
    str_detect(dataset$peoples_title, "german") ~ "germany",
    str_detect(dataset$peoples_title, "france|french") ~ "france",
    str_detect(dataset$peoples_title, "polish") ~ "poland",
    str_detect(dataset$peoples_title, paste(south_america, collapse = "|")) ~ "south_america",
    str_detect(dataset$peoples_title, paste(pakistan, collapse = "|")) ~ "pakistan",
    str_detect(dataset$peoples_title, paste(other_countries, collapse = "|")) ~ "others"
  )
)
# table(dataset$country, useNA = "always")

# replacing NA with others
dataset$country <- dataset$country %>% replace_na(., "others")

colnames(dataset)

```

## By Gender

```{r}
dataset$gender <- with(
  dataset,
  case_when(
    str_detect(dataset$content, "\\bHis\\b") ~ "male",
    str_detect(dataset$content, "\\bHer\\b") ~ "female"))


dataset$gender[13] = "male"
dataset$gender[14] = "male"
dataset$gender[55] = "male"
dataset$gender[64] = "female"
dataset$gender[86] = "male"
```

# Data Cleaning of Biographies

I've used stringr package to remove text such as "adsbygoogle.com" which came along with the scraped content. Also removing the last paragraph of each page, which had the links to further pages in the website.

This cleaning is done to all rows in the data set, but there are a few special characters that are still left to be cleaned. Writing regex had been difficult, but at least for the word cloud has a feature to ignore special characters :). I will have to find a way to generate dataset which is void of all special characters so that it doesn't effect the analysis in later stages.

```{r}
dataset$content <- dataset$content %>% str_remove_all(.,"adsbygoogle") %>%
  str_remove_all(.,"www.biographyonline.net") %>% 
  str_remove_all(.,"window.") %>% 
  str_remove_all(.,".push") %>% 
  gsub("Citation.*","",.)

```

## Updating the csv file

```{r}
write.csv(dataset,"100FamousPeople_new.csv")
```

# Future Analysis

I will dive deeper into visualizing the latest dataset, and try to incorporate my findings with word clouds. I will also explore text-mining packages in the upcoming posts.
