---
title: "Blog Post 4"
author: "Mani Shanker Kamarapu"
desription: "Tidying and Visualizing data"
date: "11/5/2022"
format:
  html:
    df-print: paged
    css: styles.css
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - Post4
  - ManiShankerKamarapu
  - Amazon Review analysis
---
## Introduction

In the last post, I have acquired the data from Amazon and done pre-processing and  converted into corpus and done a word cloud. In this blog I plan to tidy data more and analysis data using visualizations.

## Loading the libraries

```{r}
library(polite)
library(rvest)
library(ggplot2)
library(plotly)
library(tidyverse)
library(stringr)
library(quanteda)
library(tidyr)
library(RColorBrewer)
library(quanteda.textplots)
library(wordcloud)
library(wordcloud2)
library(devtools)
library(quanteda.dictionaries)
library(quanteda.sentiment)

knitr::opts_chunk$set(echo = TRUE)
```

## Reading the data

```{r}
reviews <- read_csv("amazonreview.csv")
reviews
```

## Summary of the data

```{r}
summary(reviews)
```

```{r}
str(reviews)
```

```{r}
glimpse(reviews)
```

## Pre-processing function

```{r}
clean_text <- function (text) {
  str_remove_all(text," ?(f|ht)(tp)(s?)(://)(.*)[.|/](.*)") %>% 
    # Remove mentions
    str_remove_all("@[[:alnum:]_]*") %>% 
    # Replace "&" character reference with "and"
    str_replace_all("&amp;", "and") %>%
    # Remove punctuation
    str_remove_all("[[:punct:]]") %>%
    # remove digits
    str_remove_all("[[:digit:]]") %>%
    # Replace any newline characters with a space
    str_replace_all("\\\n|\\\r", " ") %>%
    # remove strings like "<U+0001F9F5>"
    str_remove_all("<.*?>") %>% 
    # Make everything lowercase
    str_to_lower() %>%
    # Remove any trailing white space around the text and inside a string
    str_squish()
}
```

## Tidying the data

```{r}
reviews$clean_text <- clean_text(reviews$review_text) 
reviews <- reviews %>%
  drop_na(clean_text)
reviews
```

Removing unnecessary columns

```{r}
reviews <- reviews %>%
  select(-c(...1, page, review_text))
reviews
```

Pre-processing the title variable

```{r}
reviews$review_title <- reviews$review_title %>%
  str_remove_all("\n")
reviews
```

Converting star of reviews from character to numeric 

```{r}
reviews$review_star <- substr(reviews$review_star, 1, 3) %>%
  as.numeric()
  reviews
```

Frequency of stars

```{r}
reviews %>%
  group_by(review_star) %>%
  count()
```

```{r}
p <- reviews %>%
  group_by(review_star) %>%
  ggplot(aes(review_star)) +
  geom_bar() +
  ggtitle("Frequency per star")
ggplotly(p)
```

Unique set of ASIN numbers

```{r}
reviews %>%
  select(ASIN) %>%
  unique()
```

## Adding new variable book title to the reviews

```{r}
reviews <- reviews %>%
  mutate(book_title = case_when(ASIN == "B0001DBI1Q" ~ "A Game of Thrones: A Song of Ice and Fire, Book 1", 
                                ASIN == "B0001MC01Y" ~ "A Clash of Kings: A Song of Ice and Fire, Book 2", 
                                ASIN == "B00026WUZU" ~ "A Storm of Swords: A Song of Ice and Fire, Book 3", 
                                ASIN == "B07ZN4WM13" ~ "A Feast for Crows: A Song of Ice and Fire, Book 4", 
                                ASIN == "B005C7QVUE" ~ "A Dance with Dragons: A Song of Ice and Fire, Book 5", 
                                ASIN == "B000BO2D64" ~ "Twilight: The Twilight Saga, Book 1", 
                                ASIN == "B000I2JFQU" ~ "New Moon: The Twilight Saga, Book 2", 
                                ASIN == "B000UW50LW" ~ "Eclipse: The Twilight Saga, Book 3", 
                                ASIN == "B001FD6RLM" ~ "Breaking Dawn: The Twilight Saga, Book 4 ", 
                                ASIN == "B07HHJ7669" ~ "The Hunger Games", 
                                ASIN == "B07T6BQV2L" ~ "Catching Fire: The Hunger Games", 
                                ASIN == "B07T43YYRY" ~ "Mockingjay: The Hunger Games, Book 3"))
reviews
```

Frequency of each book title

```{r}
reviews %>%
  group_by(book_title) %>%
  count()
```

Frequency of stars for each book title

```{r}
reviews %>%
  group_by(book_title) %>%
  summarise(star = sum(review_star))
```

```{r}
reviews %>% 
  group_by(book_title) %>%
  summarise(star = sum(review_star)) %>%
  ggplot(aes(book_title, star)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust=1)) +
  ggtitle("No of stars per book")
```

Frequency of each type of star per book title

```{r}
reviews %>%
  group_by(book_title,review_star) %>%
  count()
```

```{r}
p <- reviews %>%
  group_by(book_title,review_star) %>%
  count() %>%
  ggplot(aes(review_star, n, color = book_title)) +
  geom_line() +
  ggtitle("Book vs Freq of each star") +
  xlab("Type of star") +
  ylab("Frequency")
ggplotly(p)
```

The plot is not much clear, let's plot it individually to be more clear

```{r}
p <- reviews %>%
  group_by(book_title,review_star) %>%
  count() %>%
  ggplot(aes(review_star, n)) +
  geom_line() +
  facet_wrap(vars(book_title), ncol = 2) +
  ggtitle("Book vs Freq of each star") +
  xlab("Type of star") +
  ylab("Frequency")
ggplotly(p)
```

Adding new variable series title to the reviews

```{r}
reviews <- reviews %>%
  mutate(series_title = case_when(ASIN == "B0001DBI1Q" ~ "A Song of Ice and Fire", 
                                ASIN == "B0001MC01Y" ~ "A Song of Ice and Fire", 
                                ASIN == "B00026WUZU" ~ "A Song of Ice and Fire", 
                                ASIN == "B07ZN4WM13" ~ "A Song of Ice and Fire", 
                                ASIN == "B005C7QVUE" ~ "A Song of Ice and Fire", 
                                ASIN == "B000BO2D64" ~ "The Twilight Saga", 
                                ASIN == "B000I2JFQU" ~ "The Twilight Saga", 
                                ASIN == "B000UW50LW" ~ "The Twilight Saga", 
                                ASIN == "B001FD6RLM" ~ "The Twilight Saga", 
                                ASIN == "B07HHJ7669" ~ "The Hunger Games", 
                                ASIN == "B07T6BQV2L" ~ "The Hunger Games", 
                                ASIN == "B07T43YYRY" ~ "The Hunger Games"))
reviews
```

Frequency of each series title

```{r}
reviews %>%
  group_by(series_title) %>%
  count()
```

Frequency of stars by series

```{r}
reviews %>%
  group_by(series_title) %>%
  summarise(star = sum(review_star))
```

```{r}
reviews %>% 
  group_by(series_title) %>%
  summarise(star = sum(review_star)) %>%
  ggplot(aes(series_title, star)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust=1)) +
  ggtitle("No of stars per series")
```

Frequency of each type of star per series title

```{r}
reviews %>%
  group_by(series_title,review_star) %>%
  count()
```

```{r}
p <- reviews %>%
  group_by(series_title,review_star) %>%
  count() %>%
  ggplot(aes(review_star, n, color = series_title)) +
  geom_line() +
  ggtitle("Series vs Freq of each star") +
  xlab("Type of star") +
  ylab("Frequency")
ggplotly(p)
```

## Tokenization of data

```{r}
# Conerting the text into corpus
text_corpus <- corpus(c(reviews$clean_text)) 
# Converting the text into tokens
text_token <- tokens(text_corpus, remove_punct=TRUE, remove_numbers = TRUE) %>% 
  tokens_select(pattern=stopwords("en"), 
                selection="remove")
text_token
```

```{r}
# Converting tokens into Document feature matrix
text_dfm <- dfm(text_token)
text_dfm
```

```{r}
# Total no of tokens
sum(ntoken(text_token))
```

```{r}
# Summary of the corpus
summary(text_corpus)
```

```{r}
# Finding the frequency of each word
word_counts <- as.data.frame(sort(colSums(text_dfm),dec=T))
colnames(word_counts) <- c("Frequency")
word_counts$word <- row.names(word_counts)
word_counts$Rank <- c(1:ncol(text_dfm))
word_counts 
```

```{r}
word_counts %>%
  head(40) %>%
  mutate(word = reorder(word, Frequency)) %>%
  ggplot(aes(word, Frequency)) +
  geom_bar(stat = "identity") +
  ylab("Occurrences") +
  coord_flip()
```

```{r}
# Trimming the dfm 
text_df <- dfm_trim(text_dfm, min_termfreq = 50, docfreq_type = "prop")
# create fcm from dfm
text_fcm <- fcm(text_df)
text_fcm
```

## Network plot

```{r}
# pull the top features
top_features <- names(topfeatures(text_fcm, 50))
# retain only those top features as part of our matrix
even_text_fcm <- fcm_select(text_fcm, pattern = top_features, selection = "keep")
# compute size weight for vertices in network
size <- log(colSums(even_text_fcm))
# create plot
textplot_network(even_text_fcm, vertex_size = size / max(size) * 2)
```

## Wordcloud

```{r}
textplot_wordcloud(text_dfm, min_size = 1.5, max_size = 4, random_order = TRUE, max_words = 150, min_count = 50, color = brewer.pal(8, "Dark2") )
```

## Further study

I will try sentimental analysis using multiple lexicons and compare which is more suitable.
